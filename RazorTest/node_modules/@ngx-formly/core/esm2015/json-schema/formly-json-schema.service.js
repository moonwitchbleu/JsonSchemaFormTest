/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ÉµreverseDeepMerge as reverseDeepMerge } from '@ngx-formly/core';
import { FormControl } from '@angular/forms';
import * as i0 from "@angular/core";
/**
 * @record
 */
export function FormlyJsonschemaOptions() { }
if (false) {
    /**
     * allows to intercept the mapping, taking the already mapped
     * formly field and the original JSONSchema source from which it
     * was mapped.
     * @type {?|undefined}
     */
    FormlyJsonschemaOptions.prototype.map;
}
/**
 * @param {?} v
 * @return {?}
 */
function isEmpty(v) {
    return v === '' || v === undefined || v === null;
}
/**
 * @param {?} field
 * @return {?}
 */
function clearFieldModel(field) {
    if (field.key) {
        field.formControl.patchValue(undefined);
        delete field.model[field.key];
    }
    else if (field.fieldGroup) {
        field.fieldGroup.forEach((/**
         * @param {?} f
         * @return {?}
         */
        f => clearFieldModel(f)));
    }
}
/**
 * @param {?} field
 * @return {?}
 */
function checkField(field) {
    ((/** @type {?} */ (field.options)))._checkField(field);
}
/**
 * @param {?} field
 * @return {?}
 */
function isFieldValid(field) {
    if (field.key) {
        return field.formControl.valid;
    }
    return field.fieldGroup.every((/**
     * @param {?} f
     * @return {?}
     */
    f => isFieldValid(f)));
}
/**
 * @record
 */
function IOptions() { }
if (false) {
    /** @type {?} */
    IOptions.prototype.schema;
}
export class FormlyJsonschema {
    /**
     * @param {?} schema
     * @param {?=} options
     * @return {?}
     */
    toFieldConfig(schema, options) {
        return this._toFieldConfig(schema, Object.assign({ schema }, (options || {})));
    }
    /**
     * @private
     * @param {?} schema
     * @param {?} options
     * @return {?}
     */
    _toFieldConfig(schema, options) {
        schema = this.resolveSchema(schema, options);
        /** @type {?} */
        let field = {
            type: this.guessType(schema),
            defaultValue: schema.default,
            templateOptions: {
                label: schema.title,
                readonly: schema.readOnly,
                description: schema.description,
            },
        };
        switch (field.type) {
            case 'null': {
                this.addValidator(field, 'null', (/**
                 * @param {?} __0
                 * @return {?}
                 */
                ({ value }) => value === null));
                break;
            }
            case 'number':
            case 'integer': {
                field.parsers = [(/**
                     * @param {?} v
                     * @return {?}
                     */
                    v => isEmpty(v) ? null : Number(v))];
                if (schema.hasOwnProperty('minimum')) {
                    field.templateOptions.min = schema.minimum;
                }
                if (schema.hasOwnProperty('maximum')) {
                    field.templateOptions.max = schema.maximum;
                }
                if (schema.hasOwnProperty('exclusiveMinimum')) {
                    field.templateOptions.exclusiveMinimum = schema.exclusiveMinimum;
                    this.addValidator(field, 'exclusiveMinimum', (/**
                     * @param {?} __0
                     * @return {?}
                     */
                    ({ value }) => isEmpty(value) || (value > schema.exclusiveMinimum)));
                }
                if (schema.hasOwnProperty('exclusiveMaximum')) {
                    field.templateOptions.exclusiveMaximum = schema.exclusiveMaximum;
                    this.addValidator(field, 'exclusiveMaximum', (/**
                     * @param {?} __0
                     * @return {?}
                     */
                    ({ value }) => isEmpty(value) || (value < schema.exclusiveMaximum)));
                }
                if (schema.hasOwnProperty('multipleOf')) {
                    field.templateOptions.step = schema.multipleOf;
                    this.addValidator(field, 'multipleOf', (/**
                     * @param {?} __0
                     * @return {?}
                     */
                    ({ value }) => isEmpty(value) || (value % schema.multipleOf === 0)));
                }
                break;
            }
            case 'string': {
                /** @type {?} */
                const schemaType = (/** @type {?} */ (schema.type));
                if (Array.isArray(schemaType) && schemaType.includes('null')) {
                    field.parsers = [(/**
                         * @param {?} v
                         * @return {?}
                         */
                        v => isEmpty(v) ? null : v)];
                }
                ['minLength', 'maxLength', 'pattern'].forEach((/**
                 * @param {?} prop
                 * @return {?}
                 */
                prop => {
                    if (schema.hasOwnProperty(prop)) {
                        field.templateOptions[prop] = schema[prop];
                    }
                }));
                break;
            }
            case 'object': {
                field.fieldGroup = [];
                const [propDeps, schemaDeps] = this.resolveDependencies(schema);
                Object.keys(schema.properties || {}).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                key => {
                    /** @type {?} */
                    const f = this._toFieldConfig((/** @type {?} */ (schema.properties[key])), options);
                    field.fieldGroup.push(f);
                    f.key = key;
                    if (Array.isArray(schema.required) && schema.required.indexOf(key) !== -1) {
                        f.templateOptions.required = true;
                    }
                    if (!f.templateOptions.required && propDeps[key]) {
                        f.expressionProperties = {
                            'templateOptions.required': (/**
                             * @param {?} m
                             * @return {?}
                             */
                            m => m && propDeps[key].some((/**
                             * @param {?} k
                             * @return {?}
                             */
                            k => !isEmpty(m[k])))),
                        };
                    }
                    if (schemaDeps[key]) {
                        field.fieldGroup.push(Object.assign({}, this._toFieldConfig(schemaDeps[key], options), { hideExpression: (/**
                             * @param {?} m
                             * @return {?}
                             */
                            m => !m || isEmpty(m[key])) }));
                    }
                }));
                if (schema.oneOf) {
                    field.fieldGroup.push(this.resolveMultiSchema((/** @type {?} */ (schema.oneOf)), options));
                }
                if (schema.anyOf) {
                    field.fieldGroup.push(this.resolveMultiSchema((/** @type {?} */ (schema.anyOf)), options));
                }
                break;
            }
            case 'array': {
                if (schema.hasOwnProperty('minItems')) {
                    field.templateOptions.minItems = schema.minItems;
                    this.addValidator(field, 'minItems', (/**
                     * @param {?} __0
                     * @return {?}
                     */
                    ({ value }) => isEmpty(value) || (value.length >= schema.minItems)));
                }
                if (schema.hasOwnProperty('maxItems')) {
                    field.templateOptions.maxItems = schema.maxItems;
                    this.addValidator(field, 'maxItems', (/**
                     * @param {?} __0
                     * @return {?}
                     */
                    ({ value }) => isEmpty(value) || (value.length <= schema.maxItems)));
                }
                if (schema.hasOwnProperty('uniqueItems')) {
                    field.templateOptions.uniqueItems = schema.uniqueItems;
                    this.addValidator(field, 'uniqueItems', (/**
                     * @param {?} __0
                     * @return {?}
                     */
                    ({ value }) => {
                        if (isEmpty(value) || !schema.uniqueItems) {
                            return true;
                        }
                        /** @type {?} */
                        const uniqueItems = Array.from(new Set(value.map((/**
                         * @param {?} v
                         * @return {?}
                         */
                        (v) => JSON.stringify(v)))));
                        return uniqueItems.length === value.length;
                    }));
                }
                // resolve items schema needed for isEnum check
                if (schema.items && !Array.isArray(schema.items)) {
                    schema.items = this.resolveSchema((/** @type {?} */ (schema.items)), options);
                }
                // TODO: remove isEnum check once adding an option to skip extension
                if (!this.isEnum(schema)) {
                    field.fieldGroup = [];
                    Object.defineProperty(field, 'fieldArray', {
                        get: (/**
                         * @return {?}
                         */
                        () => {
                            if (!Array.isArray(schema.items)) {
                                // When items is a single schema, the additionalItems keyword is meaningless, and it should not be used.
                                return this._toFieldConfig((/** @type {?} */ (schema.items)), options);
                            }
                            /** @type {?} */
                            const itemSchema = schema.items[field.fieldGroup.length]
                                ? schema.items[field.fieldGroup.length]
                                : schema.additionalItems;
                            return itemSchema
                                ? this._toFieldConfig((/** @type {?} */ (itemSchema)), options)
                                : {};
                        }),
                        enumerable: true,
                        configurable: true,
                    });
                }
                break;
            }
        }
        if (schema.hasOwnProperty('const')) {
            field.templateOptions.const = schema.const;
            this.addValidator(field, 'const', (/**
             * @param {?} __0
             * @return {?}
             */
            ({ value }) => value === schema.const));
            if (!field.type) {
                field.defaultValue = schema.const;
            }
        }
        if (this.isEnum(schema)) {
            field.templateOptions.multiple = field.type === 'array';
            field.type = 'enum';
            field.templateOptions.options = this.toEnumOptions(schema);
        }
        // map in possible formlyConfig options from the widget property
        if (schema['widget'] && schema['widget'].formlyConfig) {
            field = reverseDeepMerge(schema['widget'].formlyConfig, field);
        }
        // if there is a map function passed in, use it to allow the user to
        // further customize how fields are being mapped
        return options.map ? options.map(field, schema) : field;
    }
    /**
     * @private
     * @param {?} schema
     * @param {?} options
     * @return {?}
     */
    resolveSchema(schema, options) {
        if (schema.$ref) {
            schema = this.resolveDefinition(schema, options);
        }
        if (schema.allOf) {
            schema = this.resolveAllOf(schema, options);
        }
        return schema;
    }
    /**
     * @private
     * @param {?} __0
     * @param {?} options
     * @return {?}
     */
    resolveAllOf(_a, options) {
        var { allOf } = _a, baseSchema = tslib_1.__rest(_a, ["allOf"]);
        if (!allOf.length) {
            throw Error(`allOf array can not be empty ${allOf}.`);
        }
        return allOf.reduce((/**
         * @param {?} base
         * @param {?} schema
         * @return {?}
         */
        (base, schema) => {
            schema = this.resolveSchema(schema, options);
            if (base.required && schema.required) {
                base.required = [...base.required, ...schema.required];
            }
            if (schema.uniqueItems) {
                base.uniqueItems = schema.uniqueItems;
            }
            // resolve to min value
            ['maxLength', 'maximum', 'exclusiveMaximum', 'maxItems', 'maxProperties']
                .forEach((/**
             * @param {?} prop
             * @return {?}
             */
            prop => {
                if (!isEmpty(base[prop]) && !isEmpty(schema[prop])) {
                    base[prop] = base[prop] < schema[prop] ? base[prop] : schema[prop];
                }
            }));
            // resolve to max value
            ['minLength', 'minimum', 'exclusiveMinimum', 'minItems', 'minProperties']
                .forEach((/**
             * @param {?} prop
             * @return {?}
             */
            prop => {
                if (!isEmpty(base[prop]) && !isEmpty(schema[prop])) {
                    base[prop] = base[prop] > schema[prop] ? base[prop] : schema[prop];
                }
            }));
            return reverseDeepMerge(base, schema);
        }), baseSchema);
    }
    /**
     * @private
     * @param {?} schemas
     * @param {?} options
     * @return {?}
     */
    resolveMultiSchema(schemas, options) {
        /** @type {?} */
        let subscription = null;
        return {
            type: 'multischema',
            fieldGroup: [
                {
                    type: 'enum',
                    templateOptions: {
                        options: schemas
                            .map((/**
                         * @param {?} s
                         * @param {?} i
                         * @return {?}
                         */
                        (s, i) => ({ label: s.title, value: i }))),
                    },
                    hooks: {
                        /**
                         * @param {?} f
                         * @return {?}
                         */
                        onInit(f) {
                            /** @type {?} */
                            const anyOfField = f.parent.fieldGroup[1];
                            /** @type {?} */
                            const value = anyOfField.fieldGroup.findIndex(isFieldValid);
                            f.formControl = new FormControl(value !== -1 ? value : 0);
                            setTimeout((/**
                             * @return {?}
                             */
                            () => checkField(anyOfField)));
                            subscription = f.formControl.valueChanges.subscribe((/**
                             * @param {?} v
                             * @return {?}
                             */
                            v => {
                                clearFieldModel(anyOfField);
                                checkField(anyOfField);
                            }));
                        },
                        /**
                         * @return {?}
                         */
                        onDestroy() {
                            subscription && subscription.unsubscribe();
                        },
                    },
                },
                {
                    fieldGroup: schemas.map((/**
                     * @param {?} s
                     * @param {?} i
                     * @return {?}
                     */
                    (s, i) => (Object.assign({}, this._toFieldConfig(s, options), { hideExpression: (/**
                         * @param {?} m
                         * @param {?} fs
                         * @param {?} f
                         * @return {?}
                         */
                        (m, fs, f) => {
                            /** @type {?} */
                            const control = f.parent.parent.fieldGroup[0].formControl;
                            return !control || control.value !== i;
                        }) })))),
                },
            ],
        };
    }
    /**
     * @private
     * @param {?} schema
     * @param {?} options
     * @return {?}
     */
    resolveDefinition(schema, options) {
        const [uri, pointer] = schema.$ref.split('#/');
        if (uri) {
            throw Error(`Remote schemas for ${schema.$ref} not supported yet.`);
        }
        /** @type {?} */
        const definition = !pointer ? null : pointer.split('/').reduce((/**
         * @param {?} def
         * @param {?} path
         * @return {?}
         */
        (def, path) => def && def.hasOwnProperty(path) ? def[path] : null), options.schema);
        if (!definition) {
            throw Error(`Cannot find a definition for ${schema.$ref}.`);
        }
        if (definition.$ref) {
            return this.resolveDefinition(definition, options);
        }
        return Object.assign({}, definition, ['title', 'description', 'default'].reduce((/**
         * @param {?} annotation
         * @param {?} p
         * @return {?}
         */
        (annotation, p) => {
            if (schema.hasOwnProperty(p)) {
                annotation[p] = schema[p];
            }
            return annotation;
        }), {}));
    }
    /**
     * @private
     * @param {?} schema
     * @return {?}
     */
    resolveDependencies(schema) {
        /** @type {?} */
        const deps = {};
        /** @type {?} */
        const schemaDeps = {};
        Object.keys(schema.dependencies || {}).forEach((/**
         * @param {?} prop
         * @return {?}
         */
        prop => {
            /** @type {?} */
            const dependency = (/** @type {?} */ (schema.dependencies[prop]));
            if (Array.isArray(dependency)) {
                // Property dependencies
                dependency.forEach((/**
                 * @param {?} dep
                 * @return {?}
                 */
                dep => {
                    if (!deps[dep]) {
                        deps[dep] = [prop];
                    }
                    else {
                        deps[dep].push(prop);
                    }
                }));
            }
            else {
                // schema dependencies
                schemaDeps[prop] = dependency;
            }
        }));
        return [deps, schemaDeps];
    }
    /**
     * @private
     * @param {?} schema
     * @return {?}
     */
    guessType(schema) {
        /** @type {?} */
        const type = (/** @type {?} */ (schema.type));
        if (!type && schema.properties) {
            return 'object';
        }
        if (Array.isArray(type)) {
            if (type.length === 1) {
                return type[0];
            }
            if (type.length === 2 && type.includes('null')) {
                return type[type[0] === 'null' ? 1 : 0];
            }
        }
        return type;
    }
    /**
     * @private
     * @param {?} field
     * @param {?} name
     * @param {?} validator
     * @return {?}
     */
    addValidator(field, name, validator) {
        field.validators = field.validators || {};
        field.validators[name] = validator;
    }
    /**
     * @private
     * @param {?} schema
     * @return {?}
     */
    isEnum(schema) {
        /** @type {?} */
        const isConst = (/**
         * @param {?} s
         * @return {?}
         */
        (s) => s.hasOwnProperty('const') || (s.enum && s.enum.length === 1));
        return schema.enum
            || (schema.anyOf && schema.anyOf.every(isConst))
            || (schema.oneOf && schema.oneOf.every(isConst))
            || schema.uniqueItems && schema.items && !Array.isArray(schema.items) && this.isEnum((/** @type {?} */ (schema.items)));
    }
    /**
     * @private
     * @param {?} schema
     * @return {?}
     */
    toEnumOptions(schema) {
        if (schema.enum) {
            return schema.enum.map((/**
             * @param {?} value
             * @return {?}
             */
            value => ({ value, label: value })));
        }
        /** @type {?} */
        const toEnum = (/**
         * @param {?} s
         * @return {?}
         */
        (s) => {
            /** @type {?} */
            const value = s.hasOwnProperty('const') ? s.const : s.enum[0];
            return { value: value, label: s.title || value };
        });
        if (schema.anyOf) {
            return schema.anyOf.map(toEnum);
        }
        if (schema.oneOf) {
            return schema.oneOf.map(toEnum);
        }
        return this.toEnumOptions((/** @type {?} */ (schema.items)));
    }
}
FormlyJsonschema.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */ FormlyJsonschema.ngInjectableDef = i0.defineInjectable({ factory: function FormlyJsonschema_Factory() { return new FormlyJsonschema(); }, token: FormlyJsonschema, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,